// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (first_name, last_name, address)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateProfileParams struct {
	FirstName pgtype.Text
	LastName  pgtype.Text
	Address   pgtype.Text
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (int64, error) {
	row := q.db.QueryRow(ctx, createProfile, arg.FirstName, arg.LastName, arg.Address)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, phone_number, profile_id)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateUserParams struct {
	Email       string
	Password    string
	PhoneNumber string
	ProfileID   pgtype.Int4
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.ProfileID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteProfileByID = `-- name: DeleteProfileByID :exec
DELETE FROM profile
WHERE id = $1
`

func (q *Queries) DeleteProfileByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProfileByID, id)
	return err
}

const generateOTP = `-- name: GenerateOTP :exec
UPDATE users
SET otp = $1, otp_expiration_time = $2
WHERE phone_number = $3
`

type GenerateOTPParams struct {
	Otp               pgtype.Text
	OtpExpirationTime pgtype.Timestamp
	PhoneNumber       string
}

func (q *Queries) GenerateOTP(ctx context.Context, arg GenerateOTPParams) error {
	_, err := q.db.Exec(ctx, generateOTP, arg.Otp, arg.OtpExpirationTime, arg.PhoneNumber)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT u.id, u.email, u.phone_number, p.first_name, p.last_name, p.address
FROM users u
JOIN profile p ON u.profile_id = p.id
ORDER BY p.first_name
`

type GetAllUsersRow struct {
	ID          int64
	Email       string
	PhoneNumber string
	FirstName   pgtype.Text
	LastName    pgtype.Text
	Address     pgtype.Text
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PhoneNumber,
			&i.FirstName,
			&i.LastName,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT first_name, last_name, address
FROM profile
WHERE id = $1
`

type GetProfileByIDRow struct {
	FirstName pgtype.Text
	LastName  pgtype.Text
	Address   pgtype.Text
}

func (q *Queries) GetProfileByID(ctx context.Context, id int64) (GetProfileByIDRow, error) {
	row := q.db.QueryRow(ctx, getProfileByID, id)
	var i GetProfileByIDRow
	err := row.Scan(&i.FirstName, &i.LastName, &i.Address)
	return i, err
}

const updateProfileByID = `-- name: UpdateProfileByID :exec
UPDATE profile
SET first_name = $2, last_name = $3, address = $4
WHERE id = $1
`

type UpdateProfileByIDParams struct {
	ID        int64
	FirstName pgtype.Text
	LastName  pgtype.Text
	Address   pgtype.Text
}

func (q *Queries) UpdateProfileByID(ctx context.Context, arg UpdateProfileByIDParams) error {
	_, err := q.db.Exec(ctx, updateProfileByID,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Address,
	)
	return err
}

const verifyOTP = `-- name: VerifyOTP :one
SELECT otp_expiration_time
FROM users
WHERE phone_number = $1 AND otp = $2
`

type VerifyOTPParams struct {
	PhoneNumber string
	Otp         pgtype.Text
}

func (q *Queries) VerifyOTP(ctx context.Context, arg VerifyOTPParams) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, verifyOTP, arg.PhoneNumber, arg.Otp)
	var otp_expiration_time pgtype.Timestamp
	err := row.Scan(&otp_expiration_time)
	return otp_expiration_time, err
}
