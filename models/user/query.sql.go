// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package user

import (
	"context"
	"database/sql"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (first_name, last_name, address)
VALUES ($1, $2, $3)
RETURNING id, first_name, last_name, address
`

type CreateProfileParams struct {
	FirstName sql.NullString
	LastName  sql.NullString
	Address   sql.NullString
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile, arg.FirstName, arg.LastName, arg.Address)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Address,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, phone_number, otp, otp_expiration_time, profile_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, password, phone_number, otp, otp_expiration_time, profile_id
`

type CreateUserParams struct {
    Email             string         `json:"email"`
    Password          string         `json:"password"`
    PhoneNumber       string         `json:"phone_number"`
    Otp               sql.NullString `json:"otp"`
    OtpExpirationTime sql.NullTime   `json:"otp_expiration_time"`
    ProfileID         int64          `json:"profile_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.Otp,
		arg.OtpExpirationTime,
		arg.ProfileID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
		&i.ProfileID,
	)
	return i, err
}

const deleteProfileByID = `-- name: DeleteProfileByID :exec
DELETE FROM profile
WHERE id = $1
`

func (q *Queries) DeleteProfileByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProfileByID, id)
	return err
}

const generateOTP = `-- name: GenerateOTP :exec
UPDATE users
SET otp = $1, otp_expiration_time = $2
WHERE phone_number = $3
`

type GenerateOTPParams struct {
	Otp               sql.NullString
	OtpExpirationTime sql.NullTime
	PhoneNumber       string
}

func (q *Queries) GenerateOTP(ctx context.Context, arg GenerateOTPParams) error {
	_, err := q.db.ExecContext(ctx, generateOTP, arg.Otp, arg.OtpExpirationTime, arg.PhoneNumber)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT u.id, u.email, u.phone_number, p.first_name, p.last_name, p.address
FROM users u
JOIN profile p ON u.profile_id = p.id
ORDER BY p.first_name
`

type GetAllUsersRow struct {
	ID          int64
	Email       string
	PhoneNumber string
	FirstName   sql.NullString
	LastName    sql.NullString
	Address     sql.NullString
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PhoneNumber,
			&i.FirstName,
			&i.LastName,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT first_name, last_name, address
FROM profile
WHERE id = $1
`

type GetProfileByIDRow struct {
	FirstName sql.NullString
	LastName  sql.NullString
	Address   sql.NullString
}

func (q *Queries) GetProfileByID(ctx context.Context, id int64) (GetProfileByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileByID, id)
	var i GetProfileByIDRow
	err := row.Scan(&i.FirstName, &i.LastName, &i.Address)
	return i, err
}

const updateProfileByID = `-- name: UpdateProfileByID :exec
UPDATE profile
SET first_name = $2, last_name = $3, address = $4
WHERE id = $1
`

type UpdateProfileByIDParams struct {
	ID        int64
	FirstName sql.NullString
	LastName  sql.NullString
	Address   sql.NullString
}

func (q *Queries) UpdateProfileByID(ctx context.Context, arg UpdateProfileByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateProfileByID,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Address,
	)
	return err
}

const verifyOTP = `-- name: VerifyOTP :one
SELECT otp_expiration_time
FROM users
WHERE phone_number = $1 AND otp = $2
`

type VerifyOTPParams struct {
	PhoneNumber string
	Otp         sql.NullString
}

func (q *Queries) VerifyOTP(ctx context.Context, arg VerifyOTPParams) (sql.NullTime, error) {
	row := q.db.QueryRowContext(ctx, verifyOTP, arg.PhoneNumber, arg.Otp)
	var otp_expiration_time sql.NullTime
	err := row.Scan(&otp_expiration_time)
	return otp_expiration_time, err
}
